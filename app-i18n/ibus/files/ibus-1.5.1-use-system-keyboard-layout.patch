diff --git a/data/ibus.schemas.in b/data/ibus.schemas.in
index dbb6da8..54ccb4c 100644
--- a/data/ibus.schemas.in
+++ b/data/ibus.schemas.in
@@ -224,7 +224,7 @@
       <applyto>/desktop/ibus/general/use_system_keyboard_layout</applyto>
       <owner>ibus</owner>
       <type>bool</type>
-      <default>true</default>
+      <default>false</default>
       <locale name="C">
         <short>Use system keyboard layout</short>
 	    <long>Use system keyboard (XKB) layout</long>
diff --git a/ui/gtk3/panel.vala b/ui/gtk3/panel.vala
index 24e6b2e..9f6e5e3 100644
--- a/ui/gtk3/panel.vala
+++ b/ui/gtk3/panel.vala
@@ -48,6 +48,7 @@ class Panel : IBus.PanelService {
     private Gtk.AboutDialog m_about_dialog;
     private Gtk.CssProvider m_css_provider;
     private int m_switcher_delay_time = 400;
+    private bool m_use_system_keyboard_layout = false;
     private const string ACCELERATOR_SWITCH_IME_FOREWARD = "<Control>space";
 
     private GLib.List<Keybinding> m_keybindings = new GLib.List<Keybinding>();
@@ -265,6 +266,22 @@ class Panel : IBus.PanelService {
         }
     }
 
+    private void set_use_system_keyboard_layout(Variant? variant) {
+        Variant var_use_system_kbd_layout = variant;
+
+        if (var_use_system_kbd_layout == null) {
+            var_use_system_kbd_layout = m_config.get_value(
+                    "general",
+                    "use_system_keyboard_layout");
+        }
+
+        if (var_use_system_kbd_layout == null) {
+            return;
+        }
+
+        m_use_system_keyboard_layout = var_use_system_kbd_layout.get_boolean();
+    }
+
     public void set_config(IBus.Config config) {
         if (m_config != null) {
             m_config.value_changed.disconnect(config_value_changed_cb);
@@ -278,6 +295,7 @@ class Panel : IBus.PanelService {
             m_config.watch("general", "preload_engines");
             m_config.watch("general", "engines_order");
             m_config.watch("general", "switcher_delay_time");
+            m_config.watch("general", "use_system_keyboard_layout");
             m_config.watch("general/hotkey", "triggers");
             m_config.watch("panel", "custom_font");
             m_config.watch("panel", "use_custom_font");
@@ -286,6 +304,7 @@ class Panel : IBus.PanelService {
             unbind_switch_shortcut();
             bind_switch_shortcut(null);
             set_switcher_delay_time(null);
+            set_use_system_keyboard_layout(null);
         } else {
             update_engines(null, null);
         }
@@ -352,7 +371,9 @@ class Panel : IBus.PanelService {
             return;
         }
         // set xkb layout
-        exec_setxkbmap(engine);
+        if (!m_use_system_keyboard_layout) {
+            exec_setxkbmap(engine);
+        }
     }
 
     private void config_value_changed_cb(IBus.Config config,
@@ -380,6 +401,11 @@ class Panel : IBus.PanelService {
             set_switcher_delay_time(variant);
             return;
         }
+
+        if (section == "general" && name == "use_system_keyboard_layout") {
+            set_use_system_keyboard_layout(variant);
+            return;
+        }
     }
 
     private void handle_engine_switch(Gdk.Event event, bool revert) {
--- ibus-1.5.1/ui/gtk3/panel.c	2012-12-11 22:53:15.000000000 +0900
+++ ibus-1.5.1-build/ui/gtk3/panel.c	2013-03-06 13:49:13.650796317 +0900
@@ -145,6 +145,7 @@
 	GtkAboutDialog* m_about_dialog;
 	GtkCssProvider* m_css_provider;
 	gint m_switcher_delay_time;
+	gboolean m_use_system_keyboard_layout;
 	GList* m_keybindings;
 };
 
@@ -242,6 +243,7 @@
 static GdkModifierType panel_keybinding_get_modifiers (PanelKeybinding* self);
 static void panel_set_custom_font (Panel* self);
 static void panel_set_switcher_delay_time (Panel* self, GVariant* variant);
+static void panel_set_use_system_keyboard_layout (Panel* self, GVariant* variant);
 void panel_set_config (Panel* self, IBusConfig* config);
 static void panel_config_value_changed_cb (Panel* self, IBusConfig* config, const gchar* section, const gchar* name, GVariant* variant);
 static void _panel_config_value_changed_cb_ibus_config_value_changed (IBusConfig* _sender, const gchar* section, const gchar* name, GVariant* value, gpointer self);
@@ -558,7 +560,7 @@
 	if (_tmp9_) {
 		const gchar* _tmp10_;
 		_tmp10_ = accelerator;
-		g_warning ("panel.vala:126: Parse accelerator '%s' failed!", _tmp10_);
+		g_warning ("panel.vala:127: Parse accelerator '%s' failed!", _tmp10_);
 		_panel_keybinding_unref0 (keybinding);
 		return;
 	}
@@ -811,7 +813,7 @@
 	screen = _tmp7_;
 	_tmp8_ = screen;
 	if (_tmp8_ == NULL) {
-		g_warning ("panel.vala:198: Could not open display.");
+		g_warning ("panel.vala:199: Could not open display.");
 		_g_object_unref0 (screen);
 		_g_object_unref0 (display);
 		return;
@@ -860,7 +862,7 @@
 	}
 	_tmp23_ = font_name;
 	if (_tmp23_ == NULL) {
-		g_warning ("panel.vala:228: No config panel:custom_font.");
+		g_warning ("panel.vala:229: No config panel:custom_font.");
 		_g_variant_unref0 (var_custom_font);
 		_g_free0 (font_name);
 		_g_variant_unref0 (var_use_custom_font);
@@ -899,7 +901,7 @@
 		_tmp31_ = font_name;
 		_tmp32_ = e;
 		_tmp33_ = _tmp32_->message;
-		g_warning ("panel.vala:239: Failed css_provider_from_data: %s: %s", _tmp31_, _tmp33_);
+		g_warning ("panel.vala:240: Failed css_provider_from_data: %s: %s", _tmp31_, _tmp33_);
 		_g_error_free0 (e);
 		_g_free0 (data);
 		_g_free0 (data_format);
@@ -978,6 +980,39 @@
 }
 
 
+static void panel_set_use_system_keyboard_layout (Panel* self, GVariant* variant) {
+	GVariant* _tmp0_;
+	GVariant* _tmp1_;
+	GVariant* var_use_system_kbd_layout;
+	GVariant* _tmp2_;
+	GVariant* _tmp5_;
+	GVariant* _tmp6_;
+	gboolean _tmp7_ = FALSE;
+	g_return_if_fail (self != NULL);
+	_tmp0_ = variant;
+	_tmp1_ = _g_variant_ref0 (_tmp0_);
+	var_use_system_kbd_layout = _tmp1_;
+	_tmp2_ = var_use_system_kbd_layout;
+	if (_tmp2_ == NULL) {
+		IBusConfig* _tmp3_;
+		GVariant* _tmp4_ = NULL;
+		_tmp3_ = self->priv->m_config;
+		_tmp4_ = ibus_config_get_value (_tmp3_, "general", "use_system_keyboard_layout");
+		_g_variant_unref0 (var_use_system_kbd_layout);
+		var_use_system_kbd_layout = _tmp4_;
+	}
+	_tmp5_ = var_use_system_kbd_layout;
+	if (_tmp5_ == NULL) {
+		_g_variant_unref0 (var_use_system_kbd_layout);
+		return;
+	}
+	_tmp6_ = var_use_system_kbd_layout;
+	_tmp7_ = g_variant_get_boolean (_tmp6_);
+	self->priv->m_use_system_keyboard_layout = _tmp7_;
+	_g_variant_unref0 (var_use_system_kbd_layout);
+}
+
+
 static void _panel_config_value_changed_cb_ibus_config_value_changed (IBusConfig* _sender, const gchar* section, const gchar* name, GVariant* value, gpointer self) {
 	panel_config_value_changed_cb (self, _sender, section, name, value);
 }
@@ -1017,11 +1052,12 @@
 		IBusConfig* _tmp12_;
 		IBusConfig* _tmp13_;
 		IBusConfig* _tmp14_;
-		GVariant* _tmp15_ = NULL;
-		GVariant* _tmp16_;
-		IBusConfig* _tmp17_;
-		GVariant* _tmp18_ = NULL;
-		GVariant* _tmp19_;
+		IBusConfig* _tmp15_;
+		GVariant* _tmp16_ = NULL;
+		GVariant* _tmp17_;
+		IBusConfig* _tmp18_;
+		GVariant* _tmp19_ = NULL;
+		GVariant* _tmp20_;
 		_tmp7_ = self->priv->m_config;
 		g_signal_connect_object (_tmp7_, "value-changed", (GCallback) _panel_config_value_changed_cb_ibus_config_value_changed, self, 0);
 		_tmp8_ = self->priv->m_config;
@@ -1031,23 +1067,26 @@
 		_tmp10_ = self->priv->m_config;
 		ibus_config_watch (_tmp10_, "general", "switcher_delay_time");
 		_tmp11_ = self->priv->m_config;
-		ibus_config_watch (_tmp11_, "general/hotkey", "triggers");
+		ibus_config_watch (_tmp11_, "general", "use_system_keyboard_layout");
 		_tmp12_ = self->priv->m_config;
-		ibus_config_watch (_tmp12_, "panel", "custom_font");
+		ibus_config_watch (_tmp12_, "general/hotkey", "triggers");
 		_tmp13_ = self->priv->m_config;
-		ibus_config_watch (_tmp13_, "panel", "use_custom_font");
+		ibus_config_watch (_tmp13_, "panel", "custom_font");
 		_tmp14_ = self->priv->m_config;
-		_tmp15_ = ibus_config_get_value (_tmp14_, "general", "preload_engines");
-		_tmp16_ = _tmp15_;
-		_tmp17_ = self->priv->m_config;
-		_tmp18_ = ibus_config_get_value (_tmp17_, "general", "engines_order");
-		_tmp19_ = _tmp18_;
-		panel_update_engines (self, _tmp16_, _tmp19_);
-		_g_variant_unref0 (_tmp19_);
-		_g_variant_unref0 (_tmp16_);
+		ibus_config_watch (_tmp14_, "panel", "use_custom_font");
+		_tmp15_ = self->priv->m_config;
+		_tmp16_ = ibus_config_get_value (_tmp15_, "general", "preload_engines");
+		_tmp17_ = _tmp16_;
+		_tmp18_ = self->priv->m_config;
+		_tmp19_ = ibus_config_get_value (_tmp18_, "general", "engines_order");
+		_tmp20_ = _tmp19_;
+		panel_update_engines (self, _tmp17_, _tmp20_);
+		_g_variant_unref0 (_tmp20_);
+		_g_variant_unref0 (_tmp17_);
 		panel_unbind_switch_shortcut (self);
 		panel_bind_switch_shortcut (self, NULL);
 		panel_set_switcher_delay_time (self, NULL);
+		panel_set_use_system_keyboard_layout (self, NULL);
 	} else {
 		panel_update_engines (self, NULL, NULL);
 	}
@@ -1340,7 +1379,7 @@
 			const gchar* _tmp56_ = NULL;
 			_tmp55_ = engine;
 			_tmp56_ = ibus_engine_desc_get_layout (_tmp55_);
-			g_warning ("panel.vala:329: Switch xkb layout to %s failed.", _tmp56_);
+			g_warning ("panel.vala:348: Switch xkb layout to %s failed.", _tmp56_);
 		}
 	}
 	goto __finally3;
@@ -1353,7 +1392,7 @@
 		_inner_error_ = NULL;
 		_tmp57_ = e;
 		_tmp58_ = _tmp57_->message;
-		g_warning ("panel.vala:333: Execute setxkbmap failed: %s", _tmp58_);
+		g_warning ("panel.vala:352: Execute setxkbmap failed: %s", _tmp58_);
 		_g_error_free0 (e);
 	}
 	__finally3:
@@ -1385,7 +1424,7 @@
 			_tmp62_ = _tmp64_;
 		}
 		_tmp65_ = _tmp62_;
-		g_warning ("panel.vala:337: Execute setxkbmap failed: %s", _tmp65_);
+		g_warning ("panel.vala:356: Execute setxkbmap failed: %s", _tmp65_);
 		_g_free0 (_tmp62_);
 	}
 	args = (_vala_array_free (args, args_length1, (GDestroyNotify) g_free), NULL);
@@ -1413,7 +1452,7 @@
 	IBusEngineDesc* _tmp14_;
 	const gchar* _tmp15_ = NULL;
 	gboolean _tmp16_ = FALSE;
-	IBusEngineDesc* _tmp19_;
+	gboolean _tmp19_;
 	g_return_if_fail (self != NULL);
 	_tmp1_ = i;
 	if (_tmp1_ >= 0) {
@@ -1456,12 +1495,16 @@
 		const gchar* _tmp18_ = NULL;
 		_tmp17_ = engine;
 		_tmp18_ = ibus_engine_desc_get_name (_tmp17_);
-		g_warning ("panel.vala:351: Switch engine to %s failed.", _tmp18_);
+		g_warning ("panel.vala:370: Switch engine to %s failed.", _tmp18_);
 		_g_object_unref0 (engine);
 		return;
 	}
-	_tmp19_ = engine;
-	panel_exec_setxkbmap (self, _tmp19_);
+	_tmp19_ = self->priv->m_use_system_keyboard_layout;
+	if (!_tmp19_) {
+		IBusEngineDesc* _tmp20_;
+		_tmp20_ = engine;
+		panel_exec_setxkbmap (self, _tmp20_);
+	}
 	_g_object_unref0 (engine);
 }
 
@@ -1479,6 +1522,9 @@
 	gboolean _tmp17_ = FALSE;
 	const gchar* _tmp18_;
 	gboolean _tmp20_;
+	gboolean _tmp22_ = FALSE;
+	const gchar* _tmp23_;
+	gboolean _tmp25_;
 	g_return_if_fail (self != NULL);
 	g_return_if_fail (config != NULL);
 	g_return_if_fail (section != NULL);
@@ -1553,6 +1599,21 @@
 		panel_set_switcher_delay_time (self, _tmp21_);
 		return;
 	}
+	_tmp23_ = section;
+	if (g_strcmp0 (_tmp23_, "general") == 0) {
+		const gchar* _tmp24_;
+		_tmp24_ = name;
+		_tmp22_ = g_strcmp0 (_tmp24_, "use_system_keyboard_layout") == 0;
+	} else {
+		_tmp22_ = FALSE;
+	}
+	_tmp25_ = _tmp22_;
+	if (_tmp25_) {
+		GVariant* _tmp26_;
+		_tmp26_ = variant;
+		panel_set_use_system_keyboard_layout (self, _tmp26_);
+		return;
+	}
 }
 
 
@@ -1656,7 +1717,7 @@
 		i = _tmp30_;
 		_tmp31_ = i;
 		if (_tmp31_ < 0) {
-			g_debug ("panel.vala:407: switch cancelled");
+			g_debug ("panel.vala:433: switch cancelled");
 		} else {
 			gint _tmp32_;
 			IBusEngineDesc** _tmp33_;
@@ -2131,7 +2192,7 @@
 		_tmp10_ = binary;
 		_tmp11_ = e;
 		_tmp12_ = _tmp11_->message;
-		g_warning ("panel.vala:479: Execute %s failed! %s", _tmp10_, _tmp12_);
+		g_warning ("panel.vala:505: Execute %s failed! %s", _tmp10_, _tmp12_);
 		self->priv->m_setup_pid = (GPid) 0;
 		_g_error_free0 (e);
 	}
@@ -3289,6 +3350,7 @@
 	self->priv->_m_engines_size_ = self->priv->m_engines_length1;
 	self->priv->m_setup_pid = (GPid) 0;
 	self->priv->m_switcher_delay_time = 400;
+	self->priv->m_use_system_keyboard_layout = FALSE;
 	self->priv->m_keybindings = NULL;
 }
 
